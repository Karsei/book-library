plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
    id 'java'
    id 'jacoco'
}

group = 'com.gbook'
version = projectVersion
sourceCompatibility = '13'

jacoco {
    toolVersion('0.8.8')
}

jacocoTestReport {
    reports {
        html.enabled(true)
        xml.enabled(false)
        csv.enabled(false)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', springCloudVersion)
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

    // DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    // TEST
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
    jacoco {
        enabled(true)
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    finalizedBy('jacocoTestReport')
}

jacocoTestReport {
    finalizedBy('jacocoTestCoverageVerification')
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled(true)
            element('CLASS')
            limit {
                minimum = 0.0
            }
        }
    }
}